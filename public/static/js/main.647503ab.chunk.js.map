{"version":3,"sources":["logo.svg","components/List.js","components/EditListForm.js","components/ListsContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","List","_ref","list","_ref$onRemoveList","onRemoveList","f","_ref$editingList","editingList","react_default","a","createElement","className","key","id","title","excerpt","onClick","EditListForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","defineProperty","target","name","value","state","bind","assertThisInitialized","handleSubmit","preventDefault","_this$state","editList","onSubmit","type","placeholder","onChange","Component","ListsContainer","lists","editingListId","addNewList","removeList","_this2","axios","get","then","response","console","log","data","catch","error","_this3","post","concat","toConsumableArray","_this4","delete","filter","_this5","put","_this6","map","components_EditListForm","components_List","App","components_ListsContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.647503ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nconst List = ({list, onRemoveList=f=>f, editingList=f=>f}) =>\n    <div className=\"single-list\" key={list.id}>\n        <h4>{list.title}</h4>\n        <p>{list.excerpt}</p>\n        <button onClick={() => editingList(list.id)}>Edit</button>\n        <button onClick={() => onRemoveList(list.id)}>Erase</button>\n        <hr/>\n    </div>\nexport default List;\n","import React, { Component } from 'react';\n\nclass EditListForm extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            id: this.props.list.id,\n            title: this.props.list.title,\n            excerpt: this.props.list.excerpt\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n    handleChange = (e) => {\n        this.setState({[e.target.name]: e.target.value})\n    }\n    handleSubmit(e){\n        e.preventDefault();\n        const { id, title, excerpt } = this.state;\n        this.props.editList(id, title, excerpt);\n    }\n    render(){\n        return(\n            <form onSubmit={this.handleSubmit}>\n            <input  name=\"title\"\n                    type=\"text\"\n                    placeholder=\"Title...\"\n                    value={this.state.title}\n                    onChange={this.handleChange} />\n            <input  name=\"excerpt\"\n                    type=\"text\"\n                    placeholder=\"Excerpt...\"\n                    value={this.state.excerpt}\n                    onChange={this.handleChange} />\n            <button>Update List</button>\n        </form>  \n        )\n    }\n}\nexport default EditListForm;","import React, { Component } from 'react';\nimport axios from 'axios'\nimport List from './List';\nimport NewListForm from './NewListForm';\nimport EditListForm from './EditListForm';\n\nclass ListsContainer extends Component {\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tlists: [],\n\t\t\teditingListId: null\n\t\t}\n\t\tthis.addNewList = this.addNewList.bind(this)\n\t\tthis.removeList = this.removeList.bind(this)\n\t\tthis.editingList = this.editingList.bind(this)\n    \tthis.editList = this.editList.bind(this)\n\t}\n\n\tcomponentDidMount() {\n\t\taxios.get('http://localhost:3001/api/v1/lists.json')\n\t\t.then(response => { \n\t\t\tconsole.log(response)\n\t\t\tthis.setState({\n\t\t\t\tlists: response.data\n\t\t\t})\n\t\t})\n\t\t.catch(error => console.log(error))\n\t}\n\n\taddNewList(title, excerpt) {\n      \taxios.post( '/api/v1/lists', { list: {title, excerpt} })\n  \t\t.then(response => {\n          console.log(response)\n          const lists = [ ...this.state.lists, response.data ]\n          this.setState({lists})\n  \t\t})\n      \t.catch(error => {\n          \tconsole.log(error)\n      }\t)\n  \t}\n  \tremoveList(id) {\n      \taxios.delete( '/api/v1/lists/' + id )\n      .then(response => {\n          const lists = this.state.lists.filter(\n              list => list.id !== id\n          )\n          this.setState({lists})\n      })\n      .catch(error => console.log(error))\n  \t}\n  \teditingList(id) {\n        this.setState({\n            editingListId: id\n        })\n    }\n  \teditList(id, title, excerpt) {\n\t    axios.put( '/api/v1/lists/' + id, { \n\t        list: {\n\t            title, \n\t            excerpt\n\t        } \n\t    })\n\t    .then(response => {\n\t        console.log(response);\n\t        const lists = this.state.lists;\n\t        lists[id-1] = {id, title, excerpt}\n\t        this.setState(() => ({\n\t            lists, \n\t            editingListId: null\n\t        }))\n\t    })\n\t    .catch(error => console.log(error));\n\t}\n\n\trender() {\n        return (\n            <div className=\"Lists-container\">\n                {this.state.lists.map( list => {\n\t                if ( this.state.editingListId === list.id ) {\n\t                    return (<EditListForm \n\t                                list={list} \n\t                                key={list.id} \n\t                                editList={this.editList} \n\t                    />)\n\t                } else {\n\t                    return (<List \n\t                                list={list} \n\t                                key={list.id} \n\t                                onRemoveList={this.removeList}\n\t                                editingList={this.editingList} \n\t                    />)\n\t                }\n            \t})}\n\n            </div>\n\n        )\n    }\n}\n\nexport default ListsContainer;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListsContainer from './components/ListsContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Hello there Stranger!</h1>\n        </header>\n        <ListsContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}